using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class CharacterScript : MonoBehaviour
{
    //---child 0 = character sprite ---child 1 = selection cirlce---child 2 = action circle---child 3 = breed circle//

    //camp
    public GameObject camp;

    //lists
    public GameObject[] forests;

    //game objects
    public GameObject controlPanel;
    public GameObject scripts;
    public GameObject FRCounter;
    public GameObject breedCooldownNotice;

    //character conditions
    public bool hovered = false;
    public bool selected = false;
    public bool doingAction = false;

    //target game object for when the character has to move to places when doing actions
    public GameObject targetObject;

    //speed of character
    public float speed;

    //action time and timer
    public float actionTimer;
    public float actionTime;

    //character action booleans
    private bool lookingForFood = false;
    private bool lookingForResources = false;
    private bool goingBackToCamp = false;
    public bool lookingForPartner = false;

    //action booleans to check what the task was that the character was doing after they have completed the task
    private bool wasLookingForFood = false;
    private bool wasLookingForResources = false;

    //adds random amount for food/resource actions
    int randomCount;

    //breed cooldown
    public float breedCooldown;

    public bool breedingCancelled = false;

    //stuff for character doidling
    public bool characterShouldBeDoidling = true;
    public int randomDirection;

    //shows that the character is being hovered by mouse
    private void OnMouseEnter()
    {
        hovered = true;
    }

    private void OnMouseExit()
    {
        hovered = false;
    }

    void Start()
    {
        breedCooldown = 600;
    }

    void Update()
    {
        randomCount = Random.Range(2, 5);

        breedCooldown += Time.deltaTime;

        //hides selection circle after breeding has been cancelled
        if (breedingCancelled == true)
        {
            gameObject.transform.GetChild(1).gameObject.SetActive(false);
            breedingCancelled = false;
        }

        if (scripts.GetComponent<ModeSwitcherScript>().buildMode == false)
        {
            //character is selected when hovered over and clicked on and deselected when clicked away from
            if (hovered && Input.GetMouseButtonDown(0))
            {
                //character can only be selected if they're not doing an action
                if (!doingAction)
                {
                    if (scripts.GetComponent<BreedScript>().selectedCharacter != null)
                    {
                        if (scripts.GetComponent<BreedScript>().selectedCharacter.GetComponent<CharacterScript>().lookingForPartner == true)
                        {
                            if (breedCooldown >= 600)
                            {
                                Debug.Log(gameObject.name + " is the selected breeding partner");

                                scripts.GetComponent<BreedScript>().selectedBreedingPartner = gameObject;
                                gameObject.transform.GetChild(3).gameObject.SetActive(true);
                            }

                            else
                            {
                                scripts.GetComponent<BreedScript>().selectedCharacter = null;
                                breedCooldownNotice.SetActive(true);
                            }
                        }
                    }

                    else if (scripts.GetComponent<BreedScript>().selectedCharacter == null)
                    {
                        Debug.Log(gameObject.name + " is selected");

                        selected = true;
                    }
                }

                else if (doingAction)
                {
                    return;
                }
            }

            else if (!hovered && Input.GetMouseButtonDown(0))
            {
                if (scripts.GetComponent<BreedScript>().breeding == false)
                {
                    //if the player isn't hovering over a panel and they don't select any targets it will deselect the selected character
                    if (controlPanel.GetComponent<PanelHoverScript>().PanelHovered == false)
                    {
                        selected = false;
                        controlPanel.SetActive(false);
                        gameObject.transform.GetChild(1).gameObject.SetActive(false);
                    }

                    else if (controlPanel.GetComponent<PanelHoverScript>().PanelHovered == true)
                    {
                        return;
                    }
                }
            }

            //show control panel and selection circle if selected
            if (selected == true)
            {
                controlPanel.SetActive(true);
                gameObject.transform.GetChild(1).gameObject.SetActive(true);

                //sets the selected character in the button manager script to this character's game object
                scripts.GetComponent<ButtonManager>().selectedCharacter = gameObject;
            }

            //actions for the character
            if (lookingForResources == true)
            {
                //character is not selected anymore and action circle is shown
                selected = false;

                controlPanel.SetActive(false);

                //there is now no selected character
                scripts.GetComponent<ButtonManager>().selectedCharacter = null;

                gameObject.transform.GetChild(1).gameObject.SetActive(false);
                gameObject.transform.GetChild(2).gameObject.SetActive(true);

                doingAction = true;

                //moves toward target object
                transform.position = Vector2.MoveTowards(transform.position, targetObject.transform.position, speed * Time.deltaTime);

                //checks that the character is in the same location as the target object, but not on the z axis
                if ((transform.position.x, transform.position.y) == (targetObject.transform.position.x, targetObject.transform.position.y))
                {
                    //StartCoroutine(CharacterGoInvisible());
                    actionTimer += Time.deltaTime;

                    //stays invisible for anywhere between 2-3 minutes once character reaches target position
                    if (actionTimer < actionTime)
                    {
                        //character goes invisible
                        gameObject.transform.GetChild(0).gameObject.SetActive(false);
                        gameObject.transform.GetChild(2).gameObject.SetActive(false);
                    }

                    if (actionTimer > actionTime)
                    {
                        //booleon to show character had been looking for resources is set to true so that going back to camp boolean can read it and add the correct item
                        wasLookingForResources = true;

                        //character goes back to being visible
                        gameObject.transform.GetChild(0).gameObject.SetActive(true);
                        gameObject.transform.GetChild(2).gameObject.SetActive(true);

                        //character is no longer looking for resources and is now going back to their camp
                        lookingForResources = false;
                        goingBackToCamp = true;
                    }
                }
            }

            if (lookingForFood == true)
            {
                //character is not selected anymore and action circle is shown
                selected = false;

                controlPanel.SetActive(false);

                //there is now no selected character
                scripts.GetComponent<ButtonManager>().selectedCharacter = null;

                gameObject.transform.GetChild(1).gameObject.SetActive(false);
                gameObject.transform.GetChild(2).gameObject.SetActive(true);

                doingAction = true;

                //moves toward target object
                transform.position = Vector2.MoveTowards(transform.position, targetObject.transform.position, speed * Time.deltaTime);

                //checks that the character is in the same location as the target object, but not on the z axis
                if ((transform.position.x, transform.position.y) == (targetObject.transform.position.x, targetObject.transform.position.y))
                {
                    //StartCoroutine(CharacterGoInvisible());
                    actionTimer += Time.deltaTime;

                    //stays invisible for anywhere between 2-3 minutes once character reaches target position
                    if (actionTimer < actionTime)
                    {
                        //character goes invisible
                        gameObject.transform.GetChild(0).gameObject.SetActive(false);
                        gameObject.transform.GetChild(2).gameObject.SetActive(false);
                    }

                    if (actionTimer > actionTime)
                    {
                        //booleon to show character had been looking for food is set to true so that going back to camp boolean can read it and add the correct item
                        wasLookingForFood = true;

                        //character goes back to being visible
                        gameObject.transform.GetChild(0).gameObject.SetActive(true);
                        gameObject.transform.GetChild(2).gameObject.SetActive(true);

                        //character is no longer looking for food and is now going back to their camp
                        lookingForFood = false;
                        goingBackToCamp = true;
                    }
                }
            }

            //goes back towards camp when boolean is set to true
            if (goingBackToCamp == true)
            {
                transform.position = Vector2.MoveTowards(transform.position, camp.transform.position, speed * Time.deltaTime);

                //checks that the character is in the same location as the camp, but not on the z axis
                if ((transform.position.x, transform.position.y) == (camp.transform.position.x, camp.transform.position.y))
                {
                    //character is no longer on it's way back to camp or doing an action
                    goingBackToCamp = false;
                    doingAction = false;

                    //action circle no longer shown
                    gameObject.transform.GetChild(2).gameObject.SetActive(false);

                    if (wasLookingForResources == true)
                    {
                        //adds resources to resource count
                        FRCounter.GetComponent<FRCounterScript>().resourceCount += randomCount;
                        Debug.Log("Resources added!");
                        wasLookingForResources = false;
                    }

                    if (wasLookingForFood == true)
                    {
                        //adds food to food count
                        FRCounter.GetComponent<FRCounterScript>().foodCount += randomCount;
                        Debug.Log("Food added!");
                        wasLookingForFood = false;
                    }

                    return;
                }
            }
        }

        //if the character isn't doing anything they will go back to the camp and start doidling if they are outside of a doidling area
        if (characterShouldBeDoidling == true)
        {
            transform.position = Vector2.MoveTowards(transform.position, camp.transform.position, speed * Time.deltaTime);
        }
    }

    //for action buttons in button manager script
    public void LookForResources()
    {
        Debug.Log(gameObject.name + " is looking for resources");

        //resets action timer and picks random action time between 2 to 3 minutes
        actionTimer = 0;

        actionTime = Random.Range(2, 5);

        //sets target object
        targetObject = forests[Random.Range(0, forests.Length)];

        lookingForResources = true;
    }
    public void LookForFood()
    {
        Debug.Log(gameObject.name + " is looking for food");

        //resets action timer and picks random action time between 2 to 3 minutes
        actionTimer = 0;

        actionTime = Random.Range(2, 5);

        //sets target object
        targetObject = forests[Random.Range(0, forests.Length)];

        lookingForFood = true;
    }

    public void Breed()
    {
        if (breedCooldown >= 600)
        {
            Debug.Log(gameObject.name + " wants to breed");

            //shows breeding script that the player is trying to breed and shows breeding circle around character. Calls for the button manager to set the selected character in breeding script
            scripts.GetComponent<BreedScript>().breeding = true;
            scripts.GetComponent<BreedScript>().selectedCharacter = gameObject;
            controlPanel.SetActive(false);

            lookingForPartner = true;

            selected = false;
            gameObject.transform.GetChild(3).gameObject.SetActive(true);
        }

        else
        {
            selected = false;
            controlPanel.SetActive(false);
            breedCooldownNotice.SetActive(true);
        }
    }

    private void OnTriggerEnter2D(Collider2D collision)
    {
        if (collision.gameObject.tag == "DoidleArea")
        {
            Debug.Log("in doidle area");

            //character starts doidling when they aren't doing anything and are within a doidle area
            if (!lookingForFood && !lookingForResources && !lookingForPartner && !goingBackToCamp && !doingAction)
            {
                StartCoroutine(CharacterDoidling());
                characterShouldBeDoidling = false;
            }
            else
            {
                return;
            }
        }
    }
    private void OnTriggerExit(Collider collision)
    {
        if (collision.gameObject.tag == "DoidleArea")
        {
            Debug.Log("exited doidle area");

            //if the character still isn't doing anything but they doidle outside of the doidle area then the boolean for character should be doidling is set to true
            if (!lookingForFood && !lookingForResources && !lookingForPartner && !goingBackToCamp && !doingAction)
            {
                StopCoroutine(CharacterDoidling());
                characterShouldBeDoidling = true;
            }
            else
            {
                return;
            }
        }
    }
    void OnColliderEnter2D(Collider2D collision)
    {
        //if the character is the selected character and they collide with the selected breeding partner a baby will be born
        if (collision.gameObject == scripts.GetComponent<BreedScript>().selectedBreedingPartner && scripts.GetComponent<BreedScript>().selectedCharacter == gameObject)
        {
            Debug.Log("A child is born!");

            //when they touch a baby is born and the breed script is made aware that the player is no longer trying to breed. Selected character and selected breeding partner are set to null
            Instantiate(scripts.GetComponent<BreedScript>().child, scripts.GetComponent<BreedScript>().selectedBreedingPartner.transform.position, scripts.GetComponent<BreedScript>().selectedBreedingPartner.transform.rotation);

            scripts.GetComponent<BreedScript>().selectedCharacter.GetComponent<CharacterScript>().gameObject.transform.GetChild(3).gameObject.SetActive(false);
            scripts.GetComponent<BreedScript>().selectedBreedingPartner.GetComponent<CharacterScript>().gameObject.transform.GetChild(3).gameObject.SetActive(false);
            scripts.GetComponent<BreedScript>().selectedCharacter = null;
            scripts.GetComponent<BreedScript>().selectedBreedingPartner = null;
            scripts.GetComponent<BreedScript>().breeding = false;
        }
        else
        {
            return;
        }
    }

    IEnumerator CharacterDoidling()
    {
        randomDirection = Random.Range(1, 5);
        actionTimer = 0;
        actionTime = Random.Range(1, 2.5f);

        actionTimer += Time.deltaTime;

        if (actionTimer < actionTime)
        {
            if (randomDirection == 1)
            {
                transform.position = Vector2.up * speed * Time.deltaTime;
            }
            else if (randomDirection == 2)
            {
                transform.position = Vector2.down * speed * Time.deltaTime;
            }
            else if (randomDirection == 3)
            {
                transform.position = Vector2.left * speed * Time.deltaTime;
            }
            else if (randomDirection == 4)
            {
                transform.position = Vector2.right * speed * Time.deltaTime;
            }
        }
        if (actionTimer > actionTime)
        {
            new WaitForSeconds(Random.Range(1, 2));
            randomDirection = Random.Range(1, 5);
            actionTimer = 0;
            actionTime = Random.Range(1, 2.5f);
        }
        else
        {
            yield break;
        }
    }
}
